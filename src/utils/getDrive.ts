'use strict';

import * as fs from 'fs';
import * as google from '@googleapis/drive';

import { getOAuth2Client, resolveCredentials } from './getOAuth2Client';

import { Auth$UtilsGDrive } from '../index';
import { UtilsGDriveError } from './utilsGDriveError';

/**
 * Authentication token for Google APIs.
 * Generated by Google.
 */
export interface Token$GoogleApi {
  access_token: string;
  refresh_token: string;
  scope: string;
  token_type: string;
  expiry_date: number;
}

export function getDrive(auth: Auth$UtilsGDrive = {}): google.drive_v3.Drive {
  const credentials = resolveCredentials(auth);
  const token = resolveToken(auth);
  const oAuth2client = getOAuth2Client(credentials);
  oAuth2client.setCredentials(token);
  return google.drive({ version: 'v3', auth: oAuth2client });
}

function resolveToken(auth: Auth$UtilsGDrive = {}): Token$GoogleApi {
  if (auth.token) {
    if (typeof auth.token === 'string')
      return destructToken(JSON.parse(auth.token));
    return destructToken(auth.token);
  } else if (auth.pathToken) {
    return getTokenFile(auth.pathToken);
  } else {
    try {
      return getTokenFile('tokenGDrive.json');
    } catch (err) {
      throw new UtilsGDriveError(
        'Token not found. Consider running the script getTokenGDrive.js included in this package.'
      );
    }
  }
}

function getTokenFile(pathFile: string): Token$GoogleApi {
  const token = JSON.parse(fs.readFileSync(pathFile).toString());
  return destructToken(token);
}

function destructToken(
  json: Token$GoogleApi | { tokens: Token$GoogleApi }
): Token$GoogleApi {
  if (Object.keys(json)[0] === 'tokens')
    return (json as { tokens: Token$GoogleApi }).tokens;
  return json as Token$GoogleApi;
}
